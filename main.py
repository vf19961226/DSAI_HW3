# -*- coding: utf-8 -*-
"""elect.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QauXwBqyzPOMFC2FYDh1_TqWHXxzvaeS
"""

import pandas as pd
import numpy as np
import csv

# You should not modify this part.

import argparse

parser = argparse.ArgumentParser()
parser.add_argument("--consumption", default="./sample_data/consumption.csv", help="input the consumption data path")
parser.add_argument("--generation", default="./sample_data/generation.csv", help="input the generation data path")
parser.add_argument("--bidresult", default="./sample_data/bidresult.csv", help="input the bids result path")
parser.add_argument("--output", default="./output.csv", help="output the bids path")

args = parser.parse_args()


def output(path, data):

    df = pd.DataFrame(data, columns=["time", "action", "target_price", "target_volume"])
    df.to_csv(path, index=False)

    return

def write_csv(file_name, output):
    
    with open(file_name,'a',newline='') as csvfile:
        csv_write=csv.writer(csvfile)
        
        for i in output:
            csv_write.writerow([i])
    #print("Csv file is writed!")

def get_time():
    
    import datetime
    import time
    
    today = datetime.date.today()
    oneday = datetime.timedelta(days=1)
    tomorrow = today + oneday
    now = time.localtime()
    output = []
    long = 24 - now[3]
    for hour in range(long):
      dt = datetime.time(hour + now[3], 0, 0)
      date_time = today.strftime("%Y-%m-%d") + dt.strftime(" %H:%M:%S")
      output.append(date_time)
    for hour in range(now[3]):
      dt = datetime.time(hour, 0, 0)
      date_time = tomorrow.strftime("%Y-%m-%d") + dt.strftime(" %H:%M:%S")
      output.append(date_time)
    
    return output

def robustscaler (data):
    from sklearn.preprocessing import RobustScaler
    
    data = np.array(data)
    robust_scaler = RobustScaler()
    RS_data = robust_scaler.fit_transform(data)
    
    return RS_data

#---------------資料前處理------------------
gen = []
con = []
sur = []
with open(args.consumption, newline='') as csvfile:
    rows = csv.reader(csvfile)
    for row in rows:
        try:
            con.append(float(row[1]))
        except:
            pass
        
with open(args.generation, newline='') as csvfile:
    rows = csv.reader(csvfile)
    for row in rows:
        try:
            gen.append(float(row[1]))
        except:
            pass
        
for i in range(len(con)):
    sur.append([gen[i] - con[i]])
    
RS_sur = robustscaler(sur)
    
#---------------預測未來二十四小時------------------
from tensorflow.keras.models import load_model
model_close = load_model('./RS.h5')

#---------------電量------------------
#Build data for predict
close_predict = []
def buildpredict_close(data):        
    close_predict.append(np.array(data[0:24]))
    return np.array(close_predict)

# build Data, use last 7 days to predict next 1 days
close_predict_data = buildpredict_close(RS_sur)


prediction_close = model_close.predict(close_predict_data)

#2D:1*20
prediction_close_reshape=np.reshape(prediction_close,(prediction_close.shape[0],prediction_close.shape[1]))

#1D:20
sub_close=prediction_close_reshape[-1]
#numpy.ndarry to dataframe
dfs_close= pd.DataFrame(sub_close)
prediction_normal = dfs_close.apply(lambda x: x*(np.max(RS_sur)-np.min(RS_sur))+np.mean(RS_sur))
prediction_array=prediction_normal.to_numpy()
print(prediction_array)

record = []
date_time = get_time()
for i in range(len(date_time)):
    if prediction_array[i][0] < 0:
        data = [[date_time[i], "buy", 2.5, abs(prediction_array[i][0])]]
    elif prediction_array[i][0] > 0:
        data = [[date_time[i], "sell", 1, abs(prediction_array[i][0])]]
    elif prediction_array[i][0] == 0:
        data = [[date_time[i], "No Action", 0, 0]]
    for act in data:
        record.append(act)
    
print(record)    
output(args.output, record)